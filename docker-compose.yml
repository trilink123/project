version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aurora-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aurora_resume_db
      POSTGRES_USER: aurora_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-aurora_secure_pass_2024}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - aurora-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aurora_user -d aurora_resume_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aurora-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-aurora_redis_pass_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - aurora-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: aurora-backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://aurora_user:${DB_PASSWORD:-aurora_secure_pass_2024}@postgres:5432/aurora_resume_db
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-aurora_redis_pass_2024}@redis:6379/0
      
      # AI Configuration
      GOOGLE_API_KEY: AIzaSyB0hNxVjayoxsXWuYa8js0Er_4H-30R-vM
      
      # Server Configuration
      HOST: 0.0.0.0
      PORT: 8000
      ENVIRONMENT: production
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-aurora_secret_key_very_secure_2024_change_in_production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Logging
      LOG_LEVEL: INFO
      
      # CORS
      ALLOWED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000,http://localhost:3001
      
    volumes:
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aurora-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: aurora-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - aurora-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: aurora-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - aurora-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  aurora-network:
    driver: bridge
